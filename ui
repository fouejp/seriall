function Menu:Init()
    UserInput.InputBegan:Connect(function(Input: InputObject, Process: boolean) end)
    UserInput.InputEnded:Connect(function(Input: InputObject)
        if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) then
            Dragging = {Gui = nil, True = false}
        end
    end)
    RunService.RenderStepped:Connect(function(Step: number)
        local Menu_Frame = Menu.Screen.Menu
        Menu_Frame.Position = UDim2.fromOffset(
            math.clamp(Menu_Frame.AbsolutePosition.X,   0, math.clamp(Menu.ScreenSize.X - Menu_Frame.AbsoluteSize.X, 0, Menu.ScreenSize.X    )),
            math.clamp(Menu_Frame.AbsolutePosition.Y, -36, math.clamp(Menu.ScreenSize.Y - Menu_Frame.AbsoluteSize.Y, 0, Menu.ScreenSize.Y - 36))
        )
        local Selected_Frame = Selected.Frame
        local Selected_Item = Selected.Item
        if (Selected_Frame and Selected_Item) then
            local Offset = Selected.Offset or UDim2.fromOffset()
            local Position = UDim2.fromOffset(Selected_Item.AbsolutePosition.X, Selected_Item.AbsolutePosition.Y)
            Selected_Frame.Position = Position + Offset
        end
    
        if Scaling.True then
            MenuScaler_Button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            local Origin = Scaling.Origin
            local Size = Scaling.Size
    
            if Origin and Size then
                local Location = UserInput:GetMouseLocation()
                local NewSize = Location + (Size - Origin)
    
                Menu:SetSize(Vector2.new(
                    math.clamp(NewSize.X, Menu.MinSize.X, Menu.MaxSize.X),
                    math.clamp(NewSize.Y, Menu.MinSize.Y, Menu.MaxSize.Y)
                ))
            end
        else
            MenuScaler_Button.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        end
    
        Menu.Hue += math.clamp(Step / 100, 0, 1)
        if Menu.Hue >= 1 then Menu.Hue = 0 end
    
        if ToolTip.Enabled == true then
            ToolTip_Label.Text = ToolTip.Content
            ToolTip_Label.Position = UDim2.fromOffset(ToolTip.Item.AbsolutePosition.X, ToolTip.Item.AbsolutePosition.Y + 25)
        end
    end)
    Menu.Screen:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
        Menu.ScreenSize = Menu.Screen.AbsoluteSize
    end)
end



function Menu:NameUpdate(waitTime, name, animatedText)
    while true do
        local PlaceHolder = ''

        for i = 1, #name do
            local Character = string.sub(name, i, i)
            PlaceHolder = PlaceHolder .. Character
            Menu:SetTitle(PlaceHolder .. '<font color="#90EE90">' .. animatedText .. '</font>')
            task.wait(waitTime) 
        end

        for j = 1, #animatedText do
            local Character = string.sub(animatedText, j, j)
            Menu:SetTitle(PlaceHolder .. '<font color="#ADD8E6">' .. string.sub(animatedText, 1, j) .. '</font>')
            task.wait(waitTime)
        end
    end
end

function Menu:SetValue(tab, section, name, value)
    for _, ctrl in ipairs(self.StoredControls or {}) do
        if ctrl.Tab == tab and ctrl.Section == section and ctrl.Name == name then
            if ctrl.SetValue then
                ctrl.SetValue(value)
            end
        end
    end
end

function Menu:Sync()
    local s = getgenv().Serial
    if not s then return end

    for _, ctrl in ipairs(self.StoredControls or {}) do
        local val = nil

        if s[ctrl.Section] and type(s[ctrl.Section]) == "table" and s[ctrl.Section][ctrl.Name] ~= nil then
            val = s[ctrl.Section][ctrl.Name]
        elseif s[ctrl.Name] ~= nil then
            val = s[ctrl.Name]
        end

        if val ~= nil and ctrl.SetValue then
            ctrl.SetValue(val)
        end
    end
end

--// functions
local function MenuToggle(Action_Name: string, State: EnumItem, Input: InputObject)
    if not State or State == Enum.UserInputState.Begin then
        Menu:SetVisible(not Menu.IsVisible)
    end
end

return Menu
